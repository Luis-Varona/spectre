# SPDX-FileCopyrightText: Â© 2024 Jimmy Fitzpatrick <jcfitzpatrick12@gmail.com>
# This file is part of SPECTRE
# SPDX-License-Identifier: GPL-3.0-or-later

from typer import Typer, Option, Exit, secho
from spectre_core.spectrograms import TestResults

from ._safe_request import safe_request

test_typer = Typer(
    help = "Run tests."
)

def _pretty_print_test_results(
    file_name: str, 
    test_results: TestResults, 
    per_spectrum: bool
) -> None:
    """Print test results with appropriate formatting and colours."""
    
    def print_colored(label: str, value: bool) -> None:
        secho(f"{label}: {'PASS' if value else 'FAIL'}", fg="green" if value else "red")

    def print_spectrum_results():
        secho("\nPer spectrum results:" if per_spectrum else "\nSummary:")
        if per_spectrum:
            for time, is_valid in test_results.spectrum_validated.items():
                secho(f"  Time {float(time):.3f} [s]: {'PASS' if is_valid else 'FAIL'}", fg="green" if is_valid else "red")
        else:
            secho(f"  Validated spectrums: {test_results.num_validated_spectrums}", fg="green")
            secho(f"  Invalid spectrums: {test_results.num_invalid_spectrums}", fg="red")

    secho(f"\nTest results for {file_name}:", bold=True)
    print_colored("Times validated", test_results.times_validated)
    print_colored("Frequencies validated", test_results.frequencies_validated)
    print_spectrum_results()


@test_typer.command(
        help = ("Compare synthetic spectrograms generated by the test receiver, "
                "to known analytically derived solutions.")
)
def analytical(
    tag: str = Option(..., 
                      "--tag", 
                      "-t", 
                      help="The tag used to capture the data."),
    absolute_tolerance: float = Option(1e-3, 
                                       "--atol", 
                                       "--absolute-tolerance", 
                                       help="The absolute tolerance to which we consider 'agreement' with the "
                                            "analytical solution for each spectral component. See the 'atol' "
                                            "keyword argument for np.isclose."),
    per_spectrum: bool = Option(False, 
                                "--per-spectrum", 
                                help="Show validated status per spectrum."),
) -> None:
    
    params = {
        "absolute_tolerance": absolute_tolerance,
    }
    jsend_dict = safe_request(f"spectre-data/batches/{tag}/analytical-test-results",
                              "GET",
                              params = params)
    results_per_batch = jsend_dict["data"]
    for file_name, test_results in results_per_batch.items():
        test_results = TestResults(test_results["times_validated"],
                                   test_results["frequencies_validated"],
                                   test_results["spectrum_validated"])

        _pretty_print_test_results(file_name,
                                   test_results,
                                   per_spectrum)
        
    raise Exit()